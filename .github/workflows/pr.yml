name: Pull Request

on:
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.21', '1.22', '1.23', '1.24']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        check-latest: true

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

    - name: Run benchmarks
      run: go test -bench=. -benchmem -count=3 ./...

    - name: Upload coverage to Codecov
      if: matrix.go-version == '1.24'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-go-${{ matrix.go-version }}
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        check-latest: true

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v7
      with:
        version: v2.1.6
        args: --timeout=5m

  security:
    name: Security
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        check-latest: true

    - name: Install Gosec
      run: go install github.com/securego/gosec/v2/cmd/gosec@latest

    - name: Run Gosec Security Scanner
      run: gosec -no-fail -fmt sarif -out results.sarif ./...

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: results.sarif
      if: always()

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        check-latest: true

    - name: Build module
      run: go build ./...

    - name: Check module tidiness
      run: |
        go mod tidy
        if ! git diff --quiet go.mod $(test -f go.sum && echo go.sum); then
          echo "go.mod or go.sum is not tidy"
          git diff go.mod $(test -f go.sum && echo go.sum)
          exit 1
        fi

  validate:
    name: Validate
    runs-on: ubuntu-latest
    needs: [test, lint, security, build]
    steps:
    - name: All checks passed
      run: echo "âœ… All PR checks passed!" 